definitions:
  payload.AppError:
    properties:
      data: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
  payload.AppResponse:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  payload.CreateCategoryRequest:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  payload.CreateOrderRequest:
    properties:
      orderItems:
        items:
          $ref: '#/definitions/payload.OrderItemRequest'
        type: array
      status:
        type: string
      userId:
        type: integer
    type: object
  payload.CreateProductRequest:
    properties:
      categoryId:
        type: integer
      description:
        type: string
      imagePath:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - categoryId
    - name
    - price
    type: object
  payload.LoginRequest:
    properties:
      email:
        type: string
      password:
        maxLength: 11
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  payload.OrderItemRequest:
    properties:
      price:
        type: number
      productId:
        type: integer
      quantity:
        type: integer
    type: object
  payload.UpdateCategoryRequest:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  payload.UpdateProductRequest:
    properties:
      categoryId:
        type: integer
      description:
        type: string
      id:
        type: integer
      imagePath:
        type: string
      name:
        type: string
      price:
        minimum: 0
        type: number
      stock:
        minimum: 0
        type: integer
    required:
    - categoryId
    - name
    - price
    type: object
  payload.UserRequest:
    properties:
      email:
        type: string
      name:
        maxLength: 150
        type: string
      password:
        maxLength: 11
        minLength: 6
        type: string
      phone:
        maxLength: 11
        type: string
      role:
        enum:
        - 1
        - 2
        type: integer
    required:
    - email
    - name
    - password
    - phone
    - role
    type: object
info:
  contact: {}
  description: This is a sample server celler server.
  title: Product Management API
  version: "1.0"
paths:
  /categories:
    get:
      consumes:
      - application/json
      description: Get all categoies which is not deleted
      parameters:
      - description: the limit perpage
        in: query
        name: limit
        type: integer
      - description: the page nummber
        in: query
        name: page
        type: integer
      - in: query
        name: categoryName
        type: string
      - in: query
        name: createdAtFrom
        type: string
      - in: query
        name: createdAtTo
        type: string
      - in: query
        name: deleted
        type: boolean
      - in: query
        name: id
        type: integer
      - in: query
        name: keyword
        type: string
      - in: query
        name: updatedAtFrom
        type: string
      - in: query
        name: updatedAtTo
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Get all categories
      tags:
      - Category
    post:
      consumes:
      - application/json
      description: create a new category
      parameters:
      - description: create category with create category request
        in: body
        name: CreateCategoryRequest
        required: true
        schema:
          $ref: '#/definitions/payload.CreateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Create a category
      tags:
      - Category
  /categories/:id:
    delete:
      consumes:
      - application/json
      description: Delete category by id
      parameters:
      - description: the id of category to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Delete category by id
      tags:
      - Category
    get:
      consumes:
      - application/json
      description: Get category by id
      parameters:
      - description: the id of the category to return
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Get category by id
      tags:
      - Category
    put:
      consumes:
      - application/json
      description: Update category by id
      parameters:
      - description: the id of category to update
        in: path
        name: id
        required: true
        type: integer
      - description: update cateogory with update category request
        in: body
        name: UpdateCategoryRequest
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateCategoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Update category by id
      tags:
      - Category
  /files/upload/image:
    post:
      description: Upload a file to get link get media
      parameters:
      - description: file
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Upload a file
  /orders:
    post:
      consumes:
      - application/json
      description: Create order with order items included
      parameters:
      - description: create a new order
        in: body
        name: CreateOrderRequest
        required: true
        schema:
          $ref: '#/definitions/payload.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Create a new order
      tags:
      - Order
  /orders/:id:
    get:
      consumes:
      - application/json
      description: get order by id
      parameters:
      - description: the id of order to get the order
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Get order by id
      tags:
      - Order
  /products:
    get:
      consumes:
      - application/json
      description: Get all products which is not deleted
      parameters:
      - description: the limit perpage
        in: query
        name: limit
        type: integer
      - description: the page nummber
        in: query
        name: page
        type: integer
      - in: query
        name: categoryId
        type: integer
      - in: query
        name: createdAtFrom
        type: string
      - in: query
        name: createdAtTo
        type: string
      - in: query
        name: deleted
        type: boolean
      - in: query
        name: description
        type: string
      - in: query
        name: id
        type: integer
      - in: query
        name: keyword
        type: string
      - in: query
        name: name
        type: string
      - in: query
        name: priceFrom
        type: number
      - in: query
        name: priceTo
        type: number
      - in: query
        name: updatedAtFrom
        type: string
      - in: query
        name: updatedAtTo
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Get all products
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: create a new product
      parameters:
      - description: create product wth create product request
        in: body
        name: CreateProductRequest
        required: true
        schema:
          $ref: '#/definitions/payload.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Create a product
      tags:
      - Product
  /products/:id:
    delete:
      consumes:
      - application/json
      description: Delete product by id
      parameters:
      - description: the id of product to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Delete product by id
      tags:
      - Product
    get:
      consumes:
      - application/json
      description: Get product by id
      parameters:
      - description: the id of the product to return
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Get product by id
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update product by id
      parameters:
      - description: the id of product to update
        in: path
        name: id
        required: true
        type: integer
      - description: update product with update product request
        in: body
        name: UpdateProductRequest
        required: true
        schema:
          $ref: '#/definitions/payload.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Update product by id
      tags:
      - Product
  /products/search:
    get:
      consumes:
      - application/json
      description: Get all products which is not deleted
      parameters:
      - description: the limit perpage
        in: query
        name: limit
        type: integer
      - description: the page nummber
        in: query
        name: page
        type: integer
      - in: query
        name: categoryId
        type: integer
      - in: query
        name: createdAtFrom
        type: string
      - in: query
        name: createdAtTo
        type: string
      - in: query
        name: deleted
        type: boolean
      - in: query
        name: description
        type: string
      - in: query
        name: id
        type: integer
      - in: query
        name: keyword
        type: string
      - in: query
        name: name
        type: string
      - in: query
        name: priceFrom
        type: number
      - in: query
        name: priceTo
        type: number
      - in: query
        name: updatedAtFrom
        type: string
      - in: query
        name: updatedAtTo
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Get all products
      tags:
      - Product
  /users:
    post:
      consumes:
      - application/json
      description: Create a user to get info to authenticate
      parameters:
      - description: create new user
        in: body
        name: UserRequest
        required: true
        schema:
          $ref: '#/definitions/payload.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Create a user
      tags:
      - User
  /users/authenticate:
    post:
      consumes:
      - application/json
      description: Authenticate to receive a token string to use it for verifying
        permission
      parameters:
      - description: send the login request data to authenticate
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/payload.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/payload.AppResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/payload.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/payload.AppError'
      summary: Authenticate user to get access resource
      tags:
      - User
swagger: "2.0"
